/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "source.goat";
import "token.goat";

var Scanner = {
    
    init : $(src) {
        this.src = src;
    },

    getToken : $() {
        var c = src.get();

        while(isSpace(c)) {
            c = src.next();
        }

        var l = src.location();
        var t = this.parse();
        if (t != null) {
            t.location = l;
        }

        return t;
    },

    parse : $() {
        var c = src.get();

        if (c == Char.valueOf(0)) {
            return null;
        }

        if (isLetter(c)) {
            var b = new StringBuilder();
            do {
                b << c;
                c = src.next();
            } while(isLetter(c) || isDigit(c));
            return new Token.Identifier(b.toString());
        }

        if (c == '\"') {
            c = src.next();
            var b = new StringBuilder();
            while(c != '\"') {
                b << c;
                c = src.next();
            }
            src.next();
            return new Token.StaticString(b.toString());
        }

        src.next();

        switch(c) {
            case '(':
                return new Token.Bracket('(', ')' false);
            case '[':
                return new Token.Bracket('[', ']' false);
            case '{':
                return new Token.Bracket('{', '}' false);
            case ')':
                return new Token.Bracket(')', '(' true);
            case ']':
                return new Token.Bracket(']', '[' true);
            case '}':
                return new Token.Bracket('}', '{' true);
            case ';':
                return new Token.Semicolon();
        }

        return null;
    },

    isSpace : $(c) {
        switch(c) {
            case ' ':
            case '\r':
            case '\n':
            case '\t':
                return true;
        }
        return false;
    },

    isLetter : $(c) {
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '_')
            return true;
        return false;
    },

    isDigit : $(c) {
        return c >= '0' && c <= '9';
    }

};
