<goat>
	<v value="0.2 &quot;Goatling&quot;"/>
	<s name="Introduction">
		<p><b>Goat</b> is a high-level, dynamic, weakly typed, prototype-based, multi-paradigm, and interpreted programming language, based on JavaScript. It supports the basic functionality of JavaScript, but in addition, it adds support for multithreading, multiple inheritance, operator overloading (all as in C ++), simplified syntax, and so on.</p>
		<p>Why "Goat"? At first, I wanted to name this programming language as "Go", but unfortunately, some little-known company (it seems "Google" or something like that) has already developed a programming language with that name. After a while, when I programmed this interpreter on a laptop lying in a hammock, I was suddenly bitten by my goat. I thought that once the name "Go" is occupied, then perhaps the name "Goat" is no worse. I immediately named the project folder this name and since then it has not changed.</p>
	</s>
	
	<s name="Where to download the latest release">
		<p>On GitHub: <url>https://github.com/kniazkov/goat/releases/latest</url>.</p>
	</s>
	
	<s name="How to launch Goat script">
		<s name="Quick start">
			<p>Just download the executable file, open console, type executable name and specify a script file name as a parameter:</p>
			<c>goat.exe program.goat</c>
		</s>
		<s name="Command line parameters">
			<p>The Goat interpreter parses command line arguments as follows. All arguments started with two hyphens are internal parameters of the interpreter ("options"). The first argument which is not an option is the name of the script file. All next arguments send to script.</p>
			<p>For example,</p>
			<c>goat.exe --lib=../lib program.goat arg1 arg2</c>
			<p>or, the same thing:</p>
			<c>goat.exe program.goat --lib=../lib arg1 arg2</c>
			<p>or:</p>
			<c>goat.exe program.goat arg1 arg2 --lib=../lib</c>
			<p>where: <c>goat.exe</c> is Goat executable, <c>program.goat</c> is name of the script, <c>--lib=../lib</c> is option of the interpterer, <c>arg1</c> and <c>arg2</c> are arguments of the script.</p>
			<p>Here is a list of interpreter options:</p>
			<h name="--lib">
				<p>Path (paths) to external libraries (to importable files). For example, a path to the Goat standard library. Several paths can be separated by a semicolon.</p>
				<c>goat.exe program.goat --lib=c:\goat\lib;c:\project</c>
				<p>Note about path delimiting character, this is most commonly the slash ("/") or the backslash  ("\"). While the interpreter parsed paths, it changes delimiting characters to the character used in the current platform. Say, for Windows, all delimiter characters replaced to the backslash, and for Linux (Unix) - to slash. So path <c>--lib=..\folder\lib</c> interpreted as well as path <c>--lib=../folder/lib</c>, for all platforms.</p>
			</h>
			<h name="--debug">
				<p>The Goat interpreter launched in debug mode. It means that interpretation will stop and set step-by-step mode when the interpreter executes <c>debug;</c> statement.</p>
			</h>
			<h name="--gc">
				<p>One of three modes of garbage collection. <c>--gc=serial</c> enable serial mode, it means that the garbage collector periodically stops all threads (but it takes low processor resources for collection and has small memory overhead). <c>--gc=parallel</c> does not stop threads (but it constantly uses some processor resources and also it uses some extra memory), this mode enabled by default. <c>--gc=debug</c> used for debugging purposes for interpreter developer, it calls collector after each statement of a script and this is <b>very</b> slow.</p>
				<p>If you don't know what "garbage collection" means, please do not use this parameter, parallel collector is okay for most puЗамечание. Значительная часть rposes.</p>
			</h>
		</s>
	</s>
	
	<s name="The language reference">
		<p><b>Important note. A significant part of this chapter is the redesigned tutorial from: <url>https://www.w3schools.com/js/default.asp</url>. Since the Goat language is the modified JavaScript language, so the description of the Goat language is the modified description of the  Javascript language. Any coincidences are NOT random.</b></p>
		<s name="Hello world">
			<p>Create a new file, say <c>hello_world.goat</c> (file extension does not matter) containing one line:</p>
			<c>print("Hello, world!");</c>
			<p>and then launch it:</p>
			<c>goat.exe hello_world.goat</c>
			<p>That's all. The interpreter will start the script and will print <c>Hello, world!</c> to the console.</p>
		</s>
		<s name="Internationalization and localization">
			<p>It possible to use any Unicode characters in string literals. The Goat interpreter parses source files in UTF-8  format. Output stream also encoded to UTF-8. The previous example, but contains some "special" symbols:</p>
			<c>print("Bonjour, réalité cruelle et ingrate!");</c>
		</s>
		<s name="Program and statements">
			<s name="Program">
				<p>A computer program is a list of "instructions" to be "executed" by a computer. In a programming language, these programming instructions are called <b>statements.</b></p>
				<p>A <b>Goat program is a list of</b> programming <b>statements.</b></p>
				<c><![CDATA[
					var x, a, b; // statement 1
					a = 2; // statement 2
					b = 3; //       ... 3
					x = a + b; //       ... 4
					print(x); //       ... 5]]>
				</c>
				<p>Goat programs are executed by the Goat interpreter.</p>
			</s>
			<s name="Statements">
				<p>Goat statements are composed of: <b>Values</b>, <b>Operators</b>, <b>Expressions</b>, <b>Keywords</b>, and <b>Comments</b>.</p>
				<p>The statements are executed, one by one, in the same order as they are written.</p>
			</s>
			<s name="Semicolons">
				<p>Semicolons <c>;</c> separate Goat statements. Add a semicolon at the end of each executable statement:</p>
				<c><![CDATA[
					var x, a, b; // declare 3 variables
					a = 2; // assign the value 2 to 'a'
					b = 3; // assign the value 6 to 'b'
					x = a + b; // assign the sum of 'a' and 'b' to 'x'
					print(x); // print value of 'x']]>
				</c>
				<p>When separated by semicolons, multiple statements on one line are allowed:</p>
				<c>a = 2; b = 3; x = a + b;</c>
				<p>Though ending statements with a semicolon is not required, but highly recommended. This example is correct:</p>
				<c>print(2 + 3) // no semicolon at the end</c>
			</s>
			<s name="White space">
				<p>Goat parse tabulations and line breaks as white spaces. Goat ignores multiple spaces. You can add white space to your script to make it more readable. The following statements are equivalent:</p>
				<c><![CDATA[
					var a, b = 0;
					var a, b=0;
					var a,
						b = 0;]]>
				</c>
			</s>
			<s name="Code blocks">
				<p>Goat statements can be grouped together in code blocks, inside curly brackets <c>{...}</c>. The purpose of code blocks is to define statements to be executed together. One place you will find statements grouped together in blocks, is in Goat functions:</p>
				<c><![CDATA[
					var f = $(a, b) {
						var x;
						var y;
						x = a + b;
						y = a - b;
						print("summ: " + x + ", diff: " + y);
					};]]>
				</c>
			</s>
			<s name="Keywords and keyword sequences">
				<p>Goat statements often start with a keyword to identify the Goat action to be performed. Here is a list of the keywords (or keyword sequences):</p>
				<t>
					<h>
						<c width="180">Keyword</c>
						<c>Description</c>
					</h>
					<r>
						<c><c>var</c></c>
						<c>Declares a variable</c>
					</r>
					<r>
						<c><c>function</c> or <c>$</c></c>
						<c>Declares a function (method)</c>
					</r>
					<r>
						<c><c>thread</c></c>
						<c>Declares a thread</c>
					</r>
					<r>
						<c><c>return</c></c>
						<c>Exits a function (method)</c>
					</r>
					<r>
						<c><c>if</c>..<c>else if</c>..<c>else</c></c>
						<c>Marks a block of statements to be executed, depending on a condition</c>
					</r>
					<r>
						<c><c>switch</c>(<c>case</c>, <c>default)</c></c>
						<c>Marks a block of statements to be executed, depending on different cases</c>
					</r>
					<r>
						<c><c>for</c>(<c>in</c>)</c>
						<c>Marks a block of statements to be executed, as long as a condition is true</c>
					</r>
					<r>
						<c><c>while</c>, <c>do</c>..<c>while</c></c>
						<c>Executes a block of statements, and repeats the block, while a condition is true</c>
					</r>
					<r>
						<c><c>break</c></c>
						<c>Terminates a switch or a loop</c>
					</r>
					<r>
						<c><c>continue</c></c>
						<c>Jumps out of a loop and starts at the top</c>
					</r>
					<r>
						<c><c>try</c>..<c>catch</c>..<c>finally</c></c>
						<c>Implements error handling to a block of statements</c>
					</r>
					<r>
						<c><c>throw</c></c>
						<c>Throws an exception</c>
					</r>
					<r>
						<c><c>new</c></c>
						<c>Creates a new object</c>
					</r>
					<r>
						<c><c>import</c></c>
						<c>Imports a source file</c>
					</r>
					<r>
						<c><c>debug</c></c>
						<c>Stops the execution of Goat script, and switch the interpreter to debug (step-by-step) mode</c>
					</r>
				</t>
				<p>Goat keywords are reserved words. Reserved words cannot be used as names for variables.</p>
			</s>
		</s>
		<s name="Syntax">
			<p>Goat syntax is the set of rules, how Goat programs are constructed:</p>
			<c><![CDATA[
				var a, b, x; // How to declare variables
				a = 2; // How to assign values
				b = 3;
				x = a + b; // How to compute values
				print(x); // How to call functions
			]]>
			</c>
			<s name="Values">
				<p>The Goat syntax defines two types of values: fixed values and variable values. Fixed values are called <b>literals.</b> Variable values are called <b>variables.</b></p>
				<s name="Literals">
					<p>The most important rules for writing fixed values are:</p>
					<p><b>Integer numbers</b> are written without decimals:</p>
					<c>123</c>
					<p><b>Real numbers</b> are written with decimals, decimal separator is a dot:</p>
					<c>0.001</c>
					<p>Strings are text, written within double quotes:</p>
					<c>"Hello"</c>
					<p>Chars are symbols written within single quotes:</p>
					<c>'A'</c>
				</s>
				<s name="Variables">
					<p>In a programming language, variables are used to store data values. Goat uses the <c>var</c> keyword to <b>declare</b> variables. An <b>equal sign</b> is used to <b>assign</b> values to variables.</p>
					<p>In this example, <c>x</c> is defined as a variable. Then, <c>x</c> is assigned (given) the value 10:</p>
					<c><![CDATA[
						var x;
						x = 10;]]>
					</c>
				</s>
			</s>
			<s name="Operators">
				<p>Goat uses <b>arithmetic operators</b> ( <c>+ - *  /</c> ) to <b>compute</b> values:</p>
				<c>(5 + 6) * 10</c>
				<p>Goat uses an <b>assignment operator</b> ( = ) to <b>assign</b> values to variables:</p>
				<c><![CDATA[
					var a, b;
					a = 2;
					b = 3;]]>
				</c>
			</s>
			<s name="Expressions">
				<p>An <b>expression</b> is a combination of literals, variables, function calls, other expression and operators, which computes to a value. The computation is called an evaluation. For example, 5 * 10 evaluates to 50:</p>
				<c>5 * 10</c>
				<p>Expressions can also contain variable values:</p>
				<c>x * 2</c>
				<p>...or function calls:</p>
				<c>x * sin(y)</c>
				<p>The values can be of various types, such as numbers and strings:</p>
				<c>"Hello" + ", " + "world"</c>
			</s>
			<s name="Identifiers">
				<p><b>Identifiers</b> are names.</p>
				<p>In Goat, identifiers are used to name variables. The rules for legal names are much the same in most programming languages. In Goat, the first character must be a letter or an underscore (<c>_</c>). Subsequent characters may be letters, digits or underscores. Numbers are not allowed as the first character.</p>
			</s>
			<s name="Case sensitive">
				<p>All Goat identifiers are case sensitive. The variables <c>maxValue</c> and <c>maxvalue</c>, are two different variables.</p>
				<c><![CDATA[
					var maxValue, maxvalue;
					maxValue = 10;
					maxvalue = 0.1;]]>
				</c>
			</s>
		</s>
		<s name="Comments">
			<p>Goat comments can be used to explain Goat code, and to make it more readable. Goat comments can also be used to prevent execution, when testing alternative code.</p>
			<s name="Single line comments">
				<p>Single line comments start with <c>//</c>. Any text between <c>//</c> and the end of the line will be ignored by Goat (will not be executed). This example uses a single-line comment before each code line:</p>
				<c><![CDATA[
					// Create object:
					var obj = {};
					// Add a field to the object:
					obj.value = 10; ]]>
				</c>
				<p>This example uses a single line comment at the end of each line to explain the code:</p>
				<c><![CDATA[
					var x = 5; // Declare x, give it the value of 5
					var y = x + 2;  // Declare y, give it the value of x + 2]]>
				</c>
			</s>
			<s name="Multi-line comments">
				<p>Multi-line comments start with <c>/*</c> and end with <c>*/</c>. Any text between <c>/*</c> and <c>*/</c> will be ignored by Goat. This example uses a multi-line comment (a comment block) to explain the code:</p>
				<c><![CDATA[
					/*
					The code below declares the function which calculates
					and print sum and difference of two arguments
					*/
					var f = $(a, b) {
						var x;
						var y;
						x = a + b;
						y = a - b;
						print("summ: " + x + ", diff: " + y);
					};]]>
				</c>
			</s>
			<s name="Using comments to prevent execution">
				<p>Using comments to prevent execution of code is suitable for code testing. Adding <c>//</c> in front of a code line changes the code lines from an executable line to a comment. This example uses <c>//</c> to prevent execution of one of the code lines:</p>
				<c><![CDATA[
					var person = {};
					person.name = "Ivan";
					//person.gender = "Male";
					person.age = 33;]]>
				</c>
				<p>This example uses a comment block to prevent execution of multiple lines:</p>
				<c><![CDATA[
					var person = {};
					person.name = "Ivan";
					/*
					person.gender = "Male";
					person.age = 33;
					*/]]>					
				</c>
			</s>
		</s>
		<s name="Variables">
			<p>Goat <b>variables</b> are containers for storing data values. In this example, <c>x</c>, <c>y</c>, and <c>z</c>, are variables:</p>
			<c><![CDATA[
				var x = 5;
				var y = 6;
				var z = x + y;]]>					
			</c>
			<s name="Identifiers">
				<p>All Goat variables must be identified with unique names. These unique names are called <b>identifiers.</b> Identifiers can be short names (like <c>x</c> and <c>y</c>) or more descriptive names (<c>age</c>, <c>sum</c>, <c>totalVolume</c>). The general rules for constructing names for variables (unique identifiers) are:</p>
				<l>
					<i>names can contain letters, digits and underscores;</i>
					<i>names must begin with a letter;</i>
					<i>names can also begin with <c>_</c>;</i>
					<i>names are case sensitive (<c>y</c> and <c>Y</c> are different variables);</i>
					<i>reserved words (like Goat keywords) cannot be used as names.</i>
				</l>
			</s>
			<s name="Data types">
				<p>Goat can handle many types of data. Goat variables can hold numbers like 100 and text values like "Hello". Basic data types are:</p>
				<p><b>Integer</b> number (without decimal character):</p>
				<c>var i = 10;</c>
				<p><b>Real</b> (floating-point) number:</p>
				<c>var r = 0.01;</c>
				<p><b>String:</b></p>
				<c>var s = "Hello";</c>
				<p><b>Char</b>(single symbol):</p>
				<c>var c = 'A';</c>
				<p>And <b>Boolean:</b></p>
				<c>var b = true;</c>
			</s>
			<s name="Declaring (creating) Goat variables">
				<p>Creating a variable in Goat is called "declaring" a variable. You declare a JavaScript variable with the <c>var</c> keyword:</p>
				<c>var name;</c>
				<p>After the declaration, the variable has no value (technically it has the value of <c>undefined</c>). To assign a value to the variable, use the equal sign:</p>
				<c>name = "Ivan";</c>
				<p>You can also assign a value to the variable when you declare it:</p>
				<c>var name = "Ivan";</c>
			</s>
			<s name="One statement, many variables">
				<p>You can declare many variables in one statement. Start the statement with <c>var</c> and separate the variables by comma:</p>
				<c>var name = "Ivan", age = 33, gender = "male";</c>
				<p>A declaration can span multiple lines:</p>
				<c><![CDATA[
					var name = "Ivan",
						age = 33,
						gender = "male";]]>
				</c>
			</s>
			<s name="Undefined">
				<p>Variables are often declared without a value. The value can be something that has to be calculated, or something that will be provided later, like user input. A variable declared without a value will have the value <c>undefined</c>.</p>
				<c>var name; // value of 'name' is undefined</c>
			</s>
			<s name="Re-declaring variables">
				<p>If you re-declare a Goat variable, it will lose its value.</p>
				<c><![CDATA[
					var name = "Ivan";
					// do something...
					var name; // now, value of 'name' if undefined]]>
				</c>
			</s>
			<s name="Arithmetic">
				<p>As with algebra, you can do arithmetic with Goat variables, using operators like <c>=</c> and <c>+</c>:</p>
				<c>var x = 5 + 2 + 3;</c>
				<p>You can also add strings, but strings will be concatenated:</p>
				<c>var s = "Hello" + ", " + "world!"</c>
				<p>Also try this. The Goat language will convert second operator to string if the first operator is string:</p>
				<c>var s = "Value is" + ' ' + 5;</c>
			</s>
		</s>
	</s>
	
	<s name="In comparison with JavaScript">
		<p>The Goat programming language based in general on JavaScript, but it has some differences.</p>
		<l>
			<i>The interpreter (engine) of the programming language is not a complement to the existing solutions, say, V8. It is completely developed from scratch. The interpreter is very small program and can be compiled and started in different platforms. I tried  Windows and Linux (both x86 and ARM). All you need are C++11 compiler and standard C library (libc etc).</i>
			<i>Programs are launched not in a browser, not in a special environment (say Node.js); you can write general-purpose applications. Easy to install: just copy the file with your code and interpreter and then start.</i>
			<i>The syntax is more simple, the object model is more unified.</i>
			<i>Goat language supports multi-threading and operators overloading.</i>
			<i>You can create an object from more than one prototype.</i>
		</l>
		<p>Some samples are below.</p>
		
		<s name="Identifiers">
			<h name="JavaScript">
				<p>The first character of an identifier must be a letter, or an underscore (<c>_</c>), or a dollar sign (<c>$</c>). Subsequent characters may be letters, digits, underscores, or dollar signs.</p>
			</h>
			<h name="Goat">
				<p>The first character must be a letter or an underscore (<c>_</c>). Subsequent characters may be letters, digits or underscores.</p>
				<p>Dollar sign used as a short replacement of <c>function</c> keyword:</p>
				<c>var f = $(a, b) { };</c>
				<p>it's the same as:</p>
				<c>var f = function(a, b) { };</c>
			</h>
		</s>
		
		<s name="Keywords">
			<p>The Goat programming language reserves several additional keywords:</p>
			<t>
				<h>
					<c>Keyword</c>
					<c>Description</c>
				</h>
				<r>
					<c><c>thread</c></c>
					<c>Declares a thread</c>
				</r>
				<r>
					<c><c>import</c></c>
					<c>Imports a source file</c>
				</r>
				<r>
					<c><c>debug</c>(instead of <c>debugger</c>)</c>
					<c>Stops the execution of Goat script, and switch the interpreter to debug (step-by-step) mode</c>
				</r>
			</t>
		</s>
		
		<s name="Primitive types">
			<h name="JavaScript">
				A primitive data type is a data that is not an object and has no methods. There are 6 primitive data types: string, number, boolean, null, undefined, symbol. All primitives are immutable.
			</h>
			<h name="Goat">
				<p>There are no primitive types. All data represented as objects. Each object except <c>undefined</c> has some methods. There are some predefined objects which are prototypes for primitive data, such as numbers or strings: <c>Char</c>, <c>String</c>, <c>Integer</c>, <c>Real</c>, <c>Boolean</c> and <c>Null</c>.</p>
				<p>This programming language clearly distinguishes between strings (prototype is <c>String</c>) and individual characters (prototype is <c>Char</c>), as well as integers (<c>Integer</c>) and floating-point numbers (<c>Real</c>). These types have different set of methods and operators, but if necessary type can be converted to another:</p>
				<c><![CDATA[
					var c = 'a'; // prototype of c is Char
					var s = String.valueOf(c); // conversion to String]]>
				</c>
				<p>For determine what the type (prototype) of object (expression), use <c>instanceOf()</c> method:</p>
				<c>print(13.instanceOf(Integer)); // output: "true"</c>
				<p>All other structures, for example, functions, threads, arrays etc have own prototypes (<c>Function</c>, <c>Thread</c>, <c>Array</c>).</p>
			</h>
		</s>
		
		<s name="Scope">
			<h name="JavaScript">
				<p>There are two types of scopes: global and local. Variables defined inside a function are in the local scope. Variables defined inside of a block statement will remain in the scope they were already in. ECMAScript 6 introduced the <c>let</c> keyword. Contrary to the <c>var</c> keyword, the <c>let</c> keyword supports the declaration of local scope inside block statements.</p>
				<c><![CDATA[
					var func = function() {
						var v = 0;
						// do something...
						if (true) {
							let v = 1; // local declaration
						}
					};]]>
				</c>
				<p>If you re-declare a JavaScript variable in the same block, it will not lose its value.</p>
			</h>
			<h name="Goat">
				<p>There is no global scope. You can re-declare variable with the same name in inner block statement, it will be used only in this block.</p>
				<c><![CDATA[
					var func = $() {
						var v = 0;
						if (true) {
							var v = 1;
							print(v); // output: "1"
						}
						print(v); // output: "0"
					};]]>
				</c>
				<p>But, if you re-declare a Goat variable in the same block, it will lose its value.</p>
			</h>
		</s>
		
		<s name="Operators overloading">
			<h name="JavaScript">
				<p>Doesn't support.</p>
			</h>
			<h name="Goat">
				<p>You can use the operator as method name:</p>
				<c><![CDATA[
					var Vector = {
						init : $(x, y) {
							this.x = x; this.y = y
						},
						toString : $() {
							return "X: " + x + ", Y: " + y;
						},
						"+" : $(vec) {
							return new Vector(x + vec.x, y + vec.y);
						},
						"*" : $(val) {
							return new Vector(x * val, y * val);
						}
					};

					var v1 = new Vector(100, 200);
					var v2 = new Vector(200, 400);

					print((v1 + v2).toString()); // output: "X: 300, Y: 600"
					print(' ');
					print((v1 * 5).toString()); // output: "X: 500, Y: 1000";]]>
				</c>
			</h>
		</s>
		
		<s name="Multithreading">
			<h name="JavaScript">
				<p>Doesn't support. There are some workarounds, say web workers, and, of course, functions <c>setTimeout()</c> and <c>setInterval()</c>.</p>
			</h>
			<h name="Goat">
				<p>There is <c>thread</c> keyword. It possible to declare any function as a separate thread.</p>
				<c><![CDATA[
					var t0 = thread(){
						while(true) {
							print('A');
						}
					};

					var t1 = thread(){
						while(true) {
							print('B');
						}
					};

					t0.run();
					t1.run();

					// Output: "ABABABABABABAB...."]]>
				</c>
			</h>
		</s>

		<s name="'new' keyword and constructors">
			<h name="JavaScript">
				<p>Constructors are like regular functions, but we use them with the <c>new</c> keyword. If you inherit your object and the parent has a constructor, you need to call parent constructor to perform initialization logic.</p>
				<c><![CDATA[
					var A = function() {
						// init something...
					};

					var B = function() {
						A.apply(this);
						// init something else...
					};
					B.prototype = new A();]]>
				</c>
			</h>
			<h name="Goat">
				<p>There is special method <c>init()</c>. If method defined, interpreter call it. If method also defined in base object, interpreter call it first (order of calling constructors as in C++).</p>
				<c><![CDATA[
					var A = {
						init : $() {
							// init something...
						}
					};

					var B = A -> {
						init : $() {
							// init something else...
						}
					};

					var obj = new B(); /* both init method will be called,
										  first from A, second from B */]]>
				</c>
			</h>
		</s>

		<s name="Inheritance">
			<h name="JavaScript">
				<c><![CDATA[
					var A = function() {
						this.x = 0;
					};

					var B = function() {
						A.apply(this);
						this.y = 1;
					};
					B.prototype = new A();

					var C = function() {
						B.apply(this);
						this.z = 2;
					};
					C.prototype = new B();]]>
				</c>
				<p>Nearly all objects in JavaScript are instances of <c>Object</c>, a typical object inherits properties (including methods) from <c>Object.prototype</c>.</p>
			</h>
			<h name="Goat">
				<p>The syntax is much simpler. Use operator <c>-&gt;</c>:</p>
				<c><![CDATA[
					var A = {
						x : 0
					};

					var B = A -> {
						y : 1
					};

					var C = B -> {
						z : 2
					};]]>
				</c>
				<p>Goat language has not class (prototype) named <c>Object</c> (is the root of the class hierarchy in Java and prototype hierarchy in JavaScript). Objects have not a super-prototype. An object has prototype if it created from literal (for example, strings), or it created by new keyword, or if prototype(s) is explicitly specified when creating an object:</p>
				<c><![CDATA[
					var A = { }; // A has no prototypes 
					var S = "hello"; // the prototype of 'S' is 'String'
					var B = new A(); // the prototype of 'B' is 'A'
					var C = B->{ }; // the prototype of 'C' is 'B']]>
				</c>
			</h>
		</s>
		
		<s name="Multiple inheritance">
			<h name="JavaScript">
				<p>Is not supported. You can use some tricks (say mixins) but it is not true multiple inheritance.</p>
			</h>
			<h name="Goat">
				<p>Why not.</p>
				<c><![CDATA[
					var A = {
						x : 0
					};

					var B = {
						y : 1
					};

					var C = [A, B] -> {
						z : 2
					};]]>
				</c>
				<p>The solution of the problem of multiple inheritance ("the diamond problem"): Goat uses the list of prototypes to inherit from as an ordered list. The interpreter uses the first method it finds by depth-first searching.</p>
			</h>
		</s>	
	</s>
</goat>
