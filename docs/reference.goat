/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of interpreter of programming language
codenamed "Goat" ("Goat interpreter").

Goat interpreter is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat interpreter is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat interpreter.  If not, see <http://www.gnu.org/licenses/>.

*/

import "xml.goat";

/*
	Read XML file
*/
var file = open("reference.xml", File.Mode.READ);
debug;
file.seek(0, File.Origin.END);
var len = file.position();
file.seek(0, File.Origin.BEGIN);
var raw = file.read(len);
var xml = raw.decodeUTF8();

/*
	Parse XML and generate HTML
*/

var toc = null; // for table of contents

var parseSection = $(src, level, prefix, dst) {
	var i, l = src.content.length();
	var k = 1;
	for (i = 0; i < l; i++) {
		var child = src.content[i];
		if (child.instanceOf(XML.Element)) {
			if (child.tag == "s" || child.tag == "section") {
				var name = prefix + k + ". " + child.attrib.name;
				if (level == 0 && toc != null) {
					var href = new XML.Element("a", name);
					href.attrib["href"] = "#s_" + k;
					toc.content.push(href);
					toc.content.push(new XML.Element("br"));
					var anch = new XML.Element("a", " ");
					anch.attrib["name"] = "s_" + k;
					dst.content.push(anch);
				}
				var title = new XML.Element("div", name);
				title.attrib["class"] = "header";
				title.attrib["style"] = "font-size: " + level2FontSize(level) + "pt;";
				dst.content.push(title);
				var section = new XML.Element("div");
				dst.content.push(section);
				section.attrib["class"] = "section";
				parseSection(child, level + 1, prefix + k + '.', section);
				k++;
			}
			else if (child.tag == "h") {
				var title = new XML.Element("div", child.attrib.name);
				title.attrib["class"] = "header";
				dst.content.push(title);
				var para = new XML.Element("div");
				para.attrib["class"] = "para";
				dst.content.push(para);
				//parseParagraph(child, para);
				parseSection(child, level, prefix, para);
			}
			else if (child.tag == "p") {
				var para = new XML.Element("div");
				para.attrib["class"] = "para";
				dst.content.push(para);
				parseParagraph(child, para);
			}
			else if (child.tag == "code" || child.tag == "c") {
				var code = new XML.Element("div");
				code.attrib["class"] = "code";
				dst.content.push(code);
				parseCode(child, code);
			}
			else if (child.tag == "list" || child.tag == "l") {
				var list = new XML.Element("ul");
				list.attrib["class"] = "para";
				dst.content.push(list);
				parseList(child, list);
			}
			else if (child.tag == "table" || child.tag == "t") {
				var tbl = new XML.Element("table");
				tbl.attrib["class"] = "table";
				dst.content.push(tbl);
				parseTable(child, tbl);
			}
		}
		else if (child.instanceOf(String)) {
			dst.content.push(child);
		}
	}
};

var parseParagraph = $(src, dst) {
	var i, l = src.content.length();
	for (i = 0; i < l; i++) {
		var child = src.content[i];
		if (child.instanceOf(XML.Element)) {
			if (child.tag == "url") {
				var href = new XML.Element("a");
				href.attrib["href"] = child.content[0];
				href.content.push("" + child.content[0]);
				dst.content.push(href);
			}
			else if (child.tag == "b") {
				var b = new XML.Element("b");
				dst.content.push(b);
				parseParagraph(child, b);
			}
			else if (child.tag == "i") {
				var i = new XML.Element("i");
				dst.content.push(i);
				parseParagraph(child, i);
			}
			else if (child.tag == "code" || child.tag == "c") {
				var s = new XML.Element("span");
				s.attrib["class"] = "inline";
				dst.content.push(s);
				parseParagraph(child, s);
			}
			else if (child.tag == "draft" || child.tag == "d") {
				var s = new XML.Element("span");
				s.attrib["class"] = "draft";
				dst.content.push(s);
				parseParagraph(child, s);
			}
		}
		else if (child.instanceOf(String)) {
			dst.content.push(child);
		}
	}
};

var parseCode = $(src, dst) {
	var str = src.content[0];
	var b = new StringBuilder();
	for (var i = 0; i < str.length(); i++) {
		switch(str[i]) {
			case '\r':
				break;
			case '\t':
				b.append("  ");
				break;
			default:
				b << str[i];
				break;
		}
	}
	var lines = b.toString().split('\n');
	var k = 0;
	var offset = null;
	var line;
	while(k < lines.length()) {
		line = lines[k];
		if (line.length() == 0) {
			k++;
			continue;
		}
		for (var i = 0; i < line.length(); i++) {
			if (line[i] != ' ') {
				offset = i;
				break;
			}
		}
		if (offset != null) {
			break;
		}
		k++;
	}
	if (offset == null) {
		dst.content.push(lines[0]);
		return;
	}
	line = lines[k];
	dst.content.push(line.subString(offset));
	dst.content.push(new XML.Element("br"));
	k++;
	for (; k < lines.length(); k++) {
		line = lines[k];
		line = line.subString(offset);
		var i = 0;
		var b = new StringBuilder();
		for (; i < line.length(); i++) {
			if (line[i] == ' ') {
				b << "&nbsp;";
			}
			else {
				break;
			}
		}
		var nbsp = b.toString();
		if (nbsp.length() > 0) {
			nbsp.noEscape = true;
			dst.content.push(nbsp);
		}
		dst.content.push(line.subString(i));
		dst.content.push(new XML.Element("br"));
	}
};

var parseList = $(src, dst) {
	var i, l = src.content.length();
	for (i = 0; i < l; i++) {
		var child = src.content[i];
		if (child.instanceOf(XML.Element)) {
			if (child.tag == "item" || child.tag == "i") {
				var li = new XML.Element("li");
				dst.content.push(li);
				parseParagraph(child, li);
			}
		}
	}
};

var parseTable = $(src, dst) {
	var i, l = src.content.length();
	for (i = 0; i < l; i++) {
		var child = src.content[i];
		if (child.instanceOf(XML.Element)) {
			if (child.tag == "head" || child.tag == "h") {
				var head = new XML.Element("tr");
				//head.attrib["class"] = "tableHeader";
				dst.content.push(head);
				parseTableRow(child, head, true);
			}
			else if (child.tag == "row" || child.tag == "r") {
				var row = new XML.Element("tr");
				dst.content.push(row);
				parseTableRow(child, row, false);
			}
		}
	}
};

var parseTableRow = $(src, dst, header) {
	var i, l = src.content.length();
	var k = 0;
	for (i = 0; i < l; i++) {
		var child = src.content[i];
		if (child.instanceOf(XML.Element)) {
			if (child.tag == "cell" || child.tag == "c") {
				var cell = new XML.Element("td");
				if (header) {
					cell.attrib["class"] = "cellHeader";
				} else {
					cell.attrib["class"] = "cell";
				}
				if (k > 0) {
					cell.attrib["class"] += " cell2";
				}
				k++;
				if (defined(child.attrib["width"])) {
					cell.attrib["style"] = "width: " + child.attrib["width"] + "px;";
				}
				dst.content.push(cell);
				parseParagraph(child, cell);
			}
		}
	}
};

var level2FontSize = $(level) {
	switch(level) {
		case 0:
			return 18;
		case 1:
			return 16;
		case 2:
			return 14;
		default:
			return 12;
	}
};

var root = null;
try {
	root = XML.parse(xml);
	var html = new XML.Element("html");
	var head = new XML.Element("head");
	html.content.push(head);
	var title = new XML.Element("title", "The Goat Programming Language Reference");
	head.content.push(title);
	var font = new XML.Element("link");
	head.content.push(font);
	font.attrib["href"] = "https://fonts.googleapis.com/css?family=Barlow+Semi+Condensed|Inconsolata";
	font.attrib["rel"] = "stylesheet";
	var meta = new XML.Element("meta");
	head.content.push(meta);
	meta.attrib["charset"] = "utf-8";
	var style = new XML.Element("style");
	head.content.push(style);
	style.content.push("body { font-family: Barlow Semi Condensed, sans-serif; font-size: 12pt; -webkit-text-size-adjust: 200%;}");
	style.content.push(".code { font-family: Inconsolata, monospace; font-size: 12pt; padding-top: 10px; margin-left: 30px; }");
	style.content.push("a { color: blue; text-decoration: underline;}");
	style.content.push(".section { margin-left: 30px; }");
	style.content.push(".para { padding-top: 10px; margin-top: 0px; margin-bottom: 0px}");
	style.content.push(".header { font-weight: bold; padding-top: 15px;}");
	style.content.push(".inline { font-family: Inconsolata, monospace; font-size: 12pt; background-color: lemonchiffon; padding: 1px 2px 0px 2px; white-space: nowrap}");
	//style.content.push("table { border-top: 2px solid black; }");
	//style.content.push(".tableHeader { font-weight: bold; }");
	style.content.push(".table { margin-top: 10px; border-spacing: 0; width: 90%; }");
	style.content.push(".cellHeader { font-weight: bold; border-top: 1px solid black; border-bottom: 1px solid black; padding : 5px 2px; }");
	style.content.push(".cell { padding : 5px 2px; vertical-align: top; }");
	style.content.push(".cell2 { border-left: 1px solid black; }");
	style.content.push(".draft { background-color: pink; padding: 1px 2px 0px 2px; }");
	var body = new XML.Element("body");
	html.content.push(body);
	var docHdr = new XML.Element("div", "The Goat Programming Language Reference");
	docHdr.attrib["style"] = "font-weight: bold; font-size: 24pt;";
	body.content.push(docHdr);
	var ver = root.findFirstChild("v");
	if (ver != null) {
		var verElem = new XML.Element("div", "Version: " + ver.attrib["value"] + '.');
		verElem.attrib["class"] = "para";
		body.content.push(verElem);
	}
	var license = new XML.Element("div");
	license.attrib["class"] = "para";
	var copyright = "Copyright &copy; 2017, 2018 Ivan Kniazkov. See <a href=\"https://www.gnu.org/licenses/fdl-1.3-standalone.html\">license</a> for copying conditions.";
	copyright.noEscape = true;
	license.content.push(copyright);
	body.content.push(license);
	body.content.push(new XML.Element("hr"));
	var tocHdr = new XML.Element("div", "Table of contents");
	tocHdr.attrib["class"] = "header";
	tocHdr.attrib["style"] = "font-size: 18pt;";
	body.content.push(tocHdr);
	toc = new XML.Element("div");
	toc.attrib["class"] = "section";
	body.content.push(toc);
	parseSection(root, 0, "", body);
	print(html.toString("  "));
} catch(e) {
	if (e.instanceOf(XML.Error)) {
		print("error, position: " + e.index + ", type: " + e.type + ", data: \"..." + XML.Element.escapeEntities(xml.subString(e.index - 5, 100)) + "...\"");
	}
	else {
		print(e.trace);
	}
}
