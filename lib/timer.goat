/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var Timer = {
	setTimer : $(callback, duration) {
		if (!defined(callback) || !defined(duration))
			throw new ArgumentException();
		if (!callback.instanceOf(Function) || !duration.instanceOf(Timer.Duration))
			throw new ArgumentException();
		
		var cycle = thread() {
			var begin = clock();
			var diff = duration.getNanoseconds();
			
			while(clock() - begin < diff){
			}
			
			callback();
		};
		cycle.run();
	},
	
	setInterval : $(callback, interval) {
		if (!defined(callback) || !defined(interval))
			throw new ArgumentException();
		if (!callback.instanceOf(Function) || !interval.instanceOf(Timer.Duration))
			throw new ArgumentException();
		
		var obj = new Timer.Interval();
		var cycle = thread() {
			var begin = clock();
			var increment = interval.getNanoseconds();
			var count = 1;
			
			while(true) {
				var end = begin + increment * count;
				
				while(clock() > end) {
					obj.skipped++;
					count++;
					end = begin + increment * count;
				}

				while(clock() < end){
				}
				
				callback();
				count++;
				obj.ticks++;
			}
		};
		cycle.run();
		obj.cycle = cycle;
		return obj; 
	}
};

Timer.Duration = {
	factor : 0,
	count : 0,
	
	_set : $(count) {
		if (!defined(count))
			this.count = 0;
		else if (!isNumber(count) || count < 0)
			throw new ArgumentException();
		else
			this.count = count;
	},
	
	getNanoseconds : $() {
		return count * factor;
	}
};

Timer.Nanoseconds = Timer.Duration -> {
	factor : 1,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Microseconds = Timer.Duration -> {
	factor : 1000,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Milliseconds = Timer.Duration -> {
	factor : 1000 * 1000,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Seconds = Timer.Duration -> {
	factor : 1000 * 1000 * 1000,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Minutes = Timer.Duration -> {
	factor : 60 * 1000 * 1000 * 1000,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Hours = Timer.Duration -> {
	factor : 60 * 60 * 1000 * 1000 * 1000,
	
	init : $(count) {
		this._set(count);
	}
};

Timer.Interval = {
	cycle : null,
	ticks : 0,
	skipped : 0,
	
	stop : $() {
		cycle.stop();
	}
};
