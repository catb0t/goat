/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of standard library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var XML = {
	
	parse : $(str) {
		var elem = new XML.Element(null);
		var scan = new XML.Scanner(str);
		var parser = new XML.Parser(scan);
		parser.parseContent(elem);
		if (elem.content.length() > 0) {
			elem = elem.content[0];
			return elem;
		}
		else {
			return null;
		}
	},

	Element : {
		tag : "",
		attrib : {},
		content : [],
		
		init : $(tag, data) {
			this.tag = tag;
			this.attrib = {};
			this.content = [];
			
			if (defined(data)) {
				content.push(data);
			}
		},
		
		toString : $(indent) {
			if (!defined(indent)) {
				return this.toSimpleString();
			}
			return this.toIndentedString(indent, 0);
		},
		
		toSimpleString : $() {
			var res = new StringBuilder();
			res << '<' << tag;
			for (var key in attrib) {
				res << ' ' << key << "=\"" << escapeEntities(attrib[key]) << '\"'; 
			}
			var len = content.length();
			if (len == 0) {
				res << "/>";
			} else {
				res << '>';
				for (var i = 0; i < len; i++) {
					var child = content[i];
					if (child.instanceOf(XML.Element)) {
						res << child.toSimpleString();
					} else if (child.instanceOf(String)) {
						if (defined(child.noEscape))
							res << child;
						else
							res << escapeEntities(child);
					}
				}
				res << "</" << tag << '>';
			}
			return res.toString();
		},
		
		toIndentedString : $(indent, level) {
			var res = new StringBuilder();
			res.append(indent, level);
			res << '<' << tag;
			for (var key in attrib) {
				res << ' ' << key << "=\"" << escapeEntities(attrib[key]) << '\"'; 
			}
			var len = content.length();
			do {
				if (len == 0) {
					res << "/>\n";
					break;
				}
				if (len == 1) {
					var child = content[0];
					if (child.instanceOf(String)) {
						if (defined(child.noEscape))
							res << '>' << child << "</" << tag << '>';
						else
							res << '>' << escapeEntities(child) << "</" << tag << ">\n";
						break;
					}
				}
				res << ">\n";
				var noEscape = false;
				for (var i = 0; i < len; i++) {
					var child = content[i];
					if (child.instanceOf(XML.Element)) {
						res << child.toIndentedString(indent, level + 1);
					} else if (child.instanceOf(String)) {
						if (!noEscape)
							res.append(indent, level + 1);
						noEscape = false;
						if (defined(child.noEscape)) {
							res << child;
							noEscape = true;
						}
						else
							res << escapeEntities(child) << '\n';
					}
				}
				res.append(indent, level);
				res << "</" << tag << ">\n";
			} while(false);
			return res.toString();			
		},
		
		escapeEntities : $(s) {
			var b = new StringBuilder();
			var i, l = s.length();
			for (i = 0; i < l; i++) {
				var c = s[i];
				switch(c) {
					case '<':
						b << "&lt;";
						break;
					case '>':
						b << "&gt;";
						break;
					case '&':
						b << "&amp;";
						break;
					case '\"':
						b << "&quot;";
						break;
					case '\'':
						b << "&apos;";
						break;
					default:
						b << c;
						break;
				}
			}
			return b.toString();
		},
		
		findFirstChild : $(tag) {
			var i, len = content.length();
			for (i = 0; i < len; i++) {
				var child = content[i];
				if (child.instanceOf(XML.Element)) {
					if (child.tag == tag) {
						return child;
					}
				}
			}
			return null;
		}
	},
	
	Token : {
		type : null,
		index : null,
		data : null,
		
		init : $(type, index, data) {
			this.type = type;
			this.index = index;
			this.data = data;
		},
		
		OPEN_BRACKET : '<',
		CLOSE_BRACKET : '>',
		SLASH : '/',
		IDENTIFIER : "IDENTIFIER",
		TEXT : "TEXT",
		STRING : "STRING",
		ASSIGN : '='
	},
	
	Scanner : {
		data : "",
		index : 0,
		length : 0,
		
		init : $(data) {
			if (data.instanceOf(String)) {
				this.data = data;
				this.length = data.length();
			}
		},
		
		get : $() {
			return index < length ? data[index] : null;
		},
		
		next : $() {
			index++;
			return index < length ? data[index] : null;			
		},
		
		Mode : {
			TAG : 0,
			DATA : 1,
		},
		
		isSpace : $(c) {
			switch(c) {
				case ' ':
				case '\n':
				case '\r':
				case '\t':
					return true;
				default:
					return false;
			}
		},
		
		isSymbolOfIdentifier : $(c) {
			if (this.isSpace(c)) {
				return false;
			}
			
			switch(c) {
				case '!':
				case '\"':
				case '$':
				case '%':
				case '&':
				case '\'':
				case '(':
				case ')':
				case '*':
				case '+':
				case ',':
				case '/':
				case ';':
				case '<':
				case '>':
				case '?':
				case '@':
				case '[':
				case ']':
				case '^':
				case '{':
				case '|':
				case '}':
				case '~':
				case '=':
					return false;
				default:
					return true;
			}
		},
		
		isBeginOfIdentifier : $(c) {
			if (!this.isSymbolOfIdentifier(c) || (c >= '0' && c <= '9') || c == '.' || c == '-') {
				return false;
			}
			
			return true;
		},
		
		parseEntity : $() {
			var c = this.next();
			var b = new StringBuilder();
			do {
				if (c == ';') {
					break;
				}
				if (c == null) {
					throw new XML.Error(XML.Error.UNEXPECTED_END, index);
				}
				if (this.isSymbolOfIdentifier(c)) {
					b << c;
				}
				else {
					throw new XML.Error(XML.Error.INVALID_CHARACTER, index);
				}
				c = this.next();
			} while(true);
			var e = b.toString();
			switch(e) {
				case "lt":
					return '<';
				case "gt":
					return '>';
				case "amp":
					return '&';
				case "apos":
					return '\'';
				case "quot":
					return '\"';
				default:
					throw new XML.Error(XML.Error.UNKNOWN_ENTITY, index);
			}
		},
		
		token : $(mode) {
			var c = this.get();
			
			while(this.isSpace(c)) {
				c = this.next();
			}
			
			var i = index;
			
			switch(c) {
				case null:
					return null;					
				case '<':
					c = this.next();
					if (c == '!') { // <![CDATA[ ?
						i = index;
						c = this.next();
						var b = new StringBuilder();
						do {
							b << c;
							c = this.next();
						} while(c != '[' && c != null);
						if (c == null) {
							throw new XML.Error(XML.Error.UNEXPECTED_END, index);
						}
						if (b.toString() != "[CDATA") {
							return new XML.Token(XML.Token.EXPECTED_CDATA_SEQUENCE, i);
						}
						i = index;
						b = new StringBuilder();
						while(true) {
							var c0 = this.next();
							if (c0 == null) {
								throw new XML.Error(XML.Error.UNEXPECTED_END, index);
							}
							else if (c0 != ']') {
								b << c0;
							}
							else {
								var c1 = this.next();
								if (c1 == null) {
									throw new XML.Error(XML.Error.UNEXPECTED_END, index);
								}
								else if (c1 != ']') {
									b << c0;
									b << c1;
								}
								else {
									var c2 = this.next();
									if (c2 == null) {
										throw new XML.Error(XML.Error.UNEXPECTED_END, index);
									}
									else if (c2 != '>') {
										b << c0;
										b << c1;
										b << c2;
									}
									else {
										this.next();
										return new XML.Token(XML.Token.TEXT, i, b.toString());
									}
								}
							}
						}
					}
					else {
						return new XML.Token(XML.Token.OPEN_BRACKET, i);
					}
				case '>':
					this.next();
					return new XML.Token(XML.Token.CLOSE_BRACKET, i);
			}
			
			switch(mode) {
				case XML.Scanner.Mode.TAG:
					if (c ==  '/') {
						this.next();
						return new XML.Token(XML.Token.SLASH, i);
					}
					if (c ==  '=') {
						this.next();
						return new XML.Token(XML.Token.ASSIGN, i);
					}
					if (this.isBeginOfIdentifier(c)) {
						var b = new StringBuilder();
						do {
							b << c;
							c = this.next();
						} while(this.isSymbolOfIdentifier(c));
						return new XML.Token(XML.Token.IDENTIFIER, i, b.toString());
					}
					if (c == '\"') {
						var b = new StringBuilder();
						c = this.next();
						while(c != '\"') {
							if (c == null) {
								throw new XML.Error(XML.Error.UNEXPECTED_END, index);
							}
							if (c == '&') {
								b << this.parseEntity();
							} else {
								b << c;
							}
							c = this.next();
						}
						this.next();
						return new XML.Token(XML.Token.STRING, i, b.toString());
					}
					if (c == '\'') {
						var b = new StringBuilder();
						c = this.next();
						while(c != '\'') {
							if (c == null) {
								throw new XML.Error(XML.Error.UNEXPECTED_END, index);
							}
							if (c == '&') {
								b << this.parseEntity();
							} else {
								b << c;
							}
							c = this.next();
						}
						this.next();
						return new XML.Token(XML.Token.STRING, i, b.toString());
					}
					break;
					
				case XML.Scanner.Mode.DATA:
					var b = new StringBuilder();
					do {
						if (c == '&') {
							b << this.parseEntity();
						} else {
							b << c;
						}
						c = this.next();
					} while(c != '<' && c != '>' && c != null);
					return new XML.Token(XML.Token.TEXT, i, b.toString());
			}
			
			throw new XML.Error(XML.Error.INVALID_CHARACTER, index);
		}
	},
	
	Error : Exception -> {
		type : null,
		index : null,
		
		init : $(type, index) {
			this.type = type;
			this.index = index;
		},
		
		INVALID_TOKEN : "invalid token",
		EXPECTED_TAG_NAME : "expected tag name",
		UNEXPECTED_END : "unexpected end",
		END_TAG_MISMATCH : "end tag does not match the start tag",
		UNCLOSED_END_TAG : "end element was missing the character \'>\'",
		MISSING_EQUALS : "missing \'=\' sign between attribute and attribute value",
		MISSING_STRING : "a string literal was expected",
		DUPLICATE_ATTRIBUTE: "duplicate attribute",
		UNKNOWN_ENTITY: "unknown entity",
		INVALID_CHARACTER: "invalid character",
		EXPECTED_CDATA_SEQUENCE: "expected <![CDATA[ sequence"
	},
	
	Parser : {
		scan : null,
		
		init : $(scan) {
			this.scan = scan;
		},
		
		parseContent : $(elem) {
			while(true) {
				var tok = scan.token(XML.Scanner.Mode.DATA);
				
				if (!tok) {
					if (elem.tag != null) {
						throw new XML.Error(XML.Error.UNEXPECTED_END, scan.index);
					}
					return;
				}
				else if (tok.type == XML.Token.OPEN_BRACKET) {		// <
					var next = scan.token(XML.Scanner.Mode.TAG); 
					if (next.type == XML.Token.IDENTIFIER) {		// <tag
						elem.content.push(this.parseTag(next.data));
					}
					else if (next.type == XML.Token.SLASH) {		// </
						var ident = scan.token(XML.Scanner.Mode.TAG);
						if (!ident) {
							throw new XML.Error(XML.Error.EXPECTED_TAG_NAME, scan.index);
						}
						if (ident.type != XML.Token.IDENTIFIER) {
							throw new XML.Error(XML.Error.EXPECTED_TAG_NAME, ident.index);
						}
						if (ident.data != elem.tag) {
							throw new XML.Error(XML.Error.END_TAG_MISMATCH, ident.index);
						}
						var bracket = scan.token(XML.Scanner.Mode.TAG);
						if (!bracket) {
							throw new XML.Error(XML.Error.UNCLOSED_END_TAG, scan.index);
						}
						if (bracket.type != XML.Token.CLOSE_BRACKET) {
							throw new XML.Error(XML.Error.UNCLOSED_END_TAG, bracket.index);
						}
						return;
					}
					else {
						throw new XML.Error(XML.Error.INVALID_TOKEN, next.index);
					}
				}
				else if (tok.type == XML.Token.TEXT) {
					elem.content.push(tok.data);
				}
				else {
					throw new XML.Error(XML.Error.INVALID_TOKEN, tok.index);
				}
			}
		},
		
		parseTag : $(name) {
			var elem = new XML.Element(name);
			
			while(true) {
				var tok = scan.token(XML.Scanner.Mode.TAG);
				if (!tok) {
					throw new XML.Error(XML.Error.UNEXPECTED_END, scan.index);
				}
				if (tok.type == XML.Token.CLOSE_BRACKET) {
					this.parseContent(elem);
					return elem;
				}
				else if (tok.type == XML.Token.SLASH) {
					var bracket = scan.token(XML.Scanner.Mode.TAG);
					if (!bracket) {
						throw new XML.Error(XML.Error.UNCLOSED_END_TAG, scan.index);
					}
					if (bracket.type != XML.Token.CLOSE_BRACKET) {
						throw new XML.Error(XML.Error.UNCLOSED_END_TAG, bracket.index);
					}
					return elem;
				}
				else if (tok.type == XML.Token.IDENTIFIER) {
					var oper = scan.token(XML.Scanner.Mode.TAG);
					if (!oper) {
						throw new XML.Error(XML.Error.MISSING_EQUALS, scan.index);
					}
					if (oper.type != XML.Token.ASSIGN) {
						throw new XML.Error(XML.Error.MISSING_EQUALS, oper.index);
					}
					var value = scan.token(XML.Scanner.Mode.TAG);
					if (!value) {
						throw new XML.Error(XML.Error.MISSING_STRING, scan.index);
					}
					if (value.type != XML.Token.STRING) {
						throw new XML.Error(XML.Error.MISSING_STRING, value.index);
					}
					if (defined(elem.attrib[tok.data])) {
						throw new XML.Error(XML.Error.DUPLICATE_ATTRIBUTE, tok.index);
					}
					elem.attrib[tok.data] = value.data;
				}
				else {
					throw new XML.Error(XML.Error.INVALID_TOKEN, tok.index);
				}				
			}
		}
	}
};
