/*

Copyright (C) 2017, 2018 Ivan Kniazkov

This file is part of standart library for programming language
codenamed "Goat" ("Goat standard library").

Goat standard library is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Goat standard library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with Goat standard library.  If not, see <http://www.gnu.org/licenses/>.

*/

var XML = {
	
	parse : $(str) {
		var elem = new XML.Element(null);
		var scan = new XML.Scanner(str);
		var parser = new XML.Parser(scan);
		parser.parseContent(elem);
		return elem.content.length() > 0 ? elem.content[0] : null;
	},

	Element : {
		tag : "",
		attrib : {},
		content : [],
		
		init : $(tag, data) {
			this.tag = tag;
			this.attrib = {};
			this.content = [];
			
			if (defined(data)) {
				content.push(data);
			}
		},
		
		toString : $(indent) {
			if (!defined(indent)) {
				return this.toSimpleString();
			}
			return this.toIndentedString(indent, 0);
		},
		
		toSimpleString : $() {
			var res = new StringBuilder();
			res << '<' << tag;
			for (var key in attrib) {
				res << ' ' << key << "=\"" << attrib[key] << '\"'; 
			}
			var len = content.length();
			if (len == 0) {
				res << "/>";
			} else {
				res << '>';
				for (var i = 0; i < len; i++) {
					var child = content[i];
					if (child.instanceOf(XML.Element)) {
						res << child.toSimpleString();
					} else {
						res << child;
					}
				}
				res << "</" << tag << '>';
			}
			return res.toString();
		},
		
		toIndentedString : $(indent, level) {
			var res = new StringBuilder();
			res.append(indent, level);
			res << '<' << tag;
			for (var key in attrib) {
				res << ' ' << key << "=\"" << attrib[key] << '\"'; 
			}
			var len = content.length();
			do {
				if (len == 0) {
					res << "/>\n";
					break;
				}
				if (len == 1) {
					var child = content[0];
					if (child.instanceOf(String)) {
						res << '>' << child << "</" << tag << ">\n";
						break;
					}
				}
				res << ">\n";
				for (var i = 0; i < len; i++) {
					var child = content[i];
					if (child.instanceOf(XML.Element)) {
						res << child.toIndentedString(indent, level + 1);
					} else {
						res.append(indent, level + 1);
						res << child << '\n';
					}
				}
				res.append(indent, level);
				res << "</" << tag << ">\n";
			} while(false);
			return res.toString();			
		}
	},
	
	Token : {
		type : null,
		index : null,
		data : null,
		
		init : $(type, index, data) {
			this.type = type;
			this.index = index;
			this.data = data;
		},
		
		OPEN_BRACKET : '<',
		CLOSE_BRACKET : '>',
		SLASH : '/',
		IDENTIFIER : "IDENTIFIER",
		TEXT : "TEXT"
	},
	
	Scanner : {
		data : "",
		index : 0,
		length : 0,
		
		init : $(data) {
			if (data.instanceOf(String)) {
				this.data = data;
				this.length = data.length();
			}
		},
		
		get : $() {
			return index < length ? data[index] : null;
		},
		
		next : $() {
			index++;
			return index < length ? data[index] : null;			
		},
		
		Mode : {
			TAG : 0,
			DATA : 1,
		},
		
		isSpace : $(c) {
			switch(c) {
				case ' ':
				case '\n':
				case '\r':
				case '\t':
					return true;
				default:
					return false;
			}
		},
		
		isSymbolOfIdentifier : $(c) {
			if (this.isSpace(c)) {
				return false;
			}
			
			switch(c) {
				case '!':
				case '\"':
				case '$':
				case '%':
				case '&':
				case '\'':
				case '(':
				case ')':
				case '*':
				case '+':
				case ',':
				case '/':
				case ';':
				case '<':
				case '>':
				case '?':
				case '@':
				case '[':
				case ']':
				case '^':
				case '{':
				case '|':
				case '}':
				case '~':
					return false;
				default:
					return true;
			}
		},
		
		isBeginOfIdentifier : $(c) {
			if (!this.isSymbolOfIdentifier(c) || (c >= '0' && c <= '9') || c == '.' || c == '-') {
				return false;
			}
			
			return true;
		},
		
		token : $(mode) {
			var c = this.get();
			
			while(this.isSpace(c)) {
				c = this.next();
			}
			
			var i = index;
			
			switch(c) {
				case null:
					return null;					
				case '<':
					this.next();
					return new XML.Token(XML.Token.OPEN_BRACKET, i);
				case '>':
					this.next();
					return new XML.Token(XML.Token.CLOSE_BRACKET, i);
			}
			
			switch(mode) {
				case XML.Scanner.Mode.TAG:
					if (c ==  '/') {
						this.next();
						return new XML.Token(XML.Token.SLASH, i);
					}
					if (this.isBeginOfIdentifier(c)) {
						var b = new StringBuilder();
						do {
							b << c;
							c = this.next();
						} while(this.isSymbolOfIdentifier(c));
						return new XML.Token(XML.Token.IDENTIFIER, i, b.toString());
					}
					break;
					
				case XML.Scanner.Mode.DATA:
					var b = new StringBuilder();
					do {
						b << c;
						c = this.next();
					} while(c != '<' && c != '>' && c != null);
					return new XML.Token(XML.Token.TEXT, i, b.toString());
			}
			
			return null;
		}
	},
	
	Parser : {
		scan : null,
		
		init : $(scan) {
			this.scan = scan;
		},

		parseContent : $(elem) {
			var tok = scan.token();
			elem.content.push("test...");
			/*
			while(true) {
				var tok = scan.token();
				
				if (tok == null) {
					return;
				}
				
				if (tok.type == XML.Token.OPEN_BRACKET) {
					var child == this.parseTag(
				}
			}
			*/
		},
		
		parseTag : $() {
			
		}
	}
};
